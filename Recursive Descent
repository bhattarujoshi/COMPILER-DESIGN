#include <stdio.h>
#include <ctype.h>
#include <string.h>

// Global variables
char input[100];
int pos = 0;

// Function declarations for recursive descent parsing
int E();  // Expression
int EPrime(); // Expression Prime
int T();  // Term
int TPrime(); // Term Prime
int F();  // Factor

// Function to parse an expression: E -> T E'
int E() {
    if (T()) {
        if (EPrime()) {
            return 1;
        }
    }
    return 0;
}

// Function to parse E': E' -> + T E' | ε
int EPrime() {
    if (input[pos] == '+') {
        pos++;
        if (T()) {
            if (EPrime()) {
                return 1;
            }
        }
        return 0;
    }
    // ε (epsilon) production
    return 1;
}

// Function to parse a term: T -> F T'
int T() {
    if (F()) {
        if (TPrime()) {
            return 1;
        }
    }
    return 0;
}

// Function to parse T': T' -> * F T' | ε
int TPrime() {
    if (input[pos] == '*') {
        pos++;
        if (F()) {
            if (TPrime()) {
                return 1;
            }
        }
        return 0;
    }
    // ε (epsilon) production
    return 1;
}

// Function to parse a factor: F -> ( E ) | id
int F() {
    if (input[pos] == '(') {
        pos++;
        if (E()) {
            if (input[pos] == ')') {
                pos++;
                return 1;
            }
        }
        return 0;
    } else if (islower(input[pos])) {  // id is assumed to be a lowercase letter
        pos++;
        return 1;
    }
    return 0;
}

int main() {
    printf("Enter an arithmetic expression: ");
    scanf("%s", input);

    // Start parsing from the start symbol E
    if (E() && input[pos] == '\0') {
        printf("The input expression is valid.\n");
    } else {
        printf("The input expression is invalid.\n");
    }

    return 0;
}
